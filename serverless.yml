service: ticket-system

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  timeout: 30
  environment:
    TICKETS_TABLE: ${self:service}-events
    UPLOAD_BUCKET: ${self:service}-uploads
    JWT_SECRET_KEY: faas_key_ita
    SQS_QUEUE_URL: !GetAtt MyQueue.QueueUrl


plugins:
  - serverless-offline
  - serverless-localstack

custom:
  localstack:
    stages:
      - local
  ses:
    endpoint: http://localhost:4579
    region: us-east-1

functions:
  createTicket:
    handler: handler.createTicket
    events:
      - http:
          path: /tickets
          method: post
          cors: true

  getTickets:
    handler: handler.getTickets
    events:
      - http:
          path: /tickets
          method: get
          cors: true

  getTicket:
    handler: handler.getTicket
    events:
      - http:
          path: /tickets/{id}
          method: get
          cors: true

  updateTicket:
    handler: handler.updateTicket
    events:
      - http:
          path: /tickets/{id}
          method: put
          cors: true

  deleteTicket:
    handler: handler.deleteTicket
    events:
      - http:
          path: /tickets/{id}
          method: delete
          cors: true

  hourlyTask:
    handler: handler.hourlyTask
    events:
      - schedule:
          rate: rate(1 hour)

  sendEmail:
    handler: handler.sendEmail

  handleSQSMessage:
    handler: handler.handleSQSMessage
    events:
      - sqs:
          arn:
            Fn::GetAtt: [MyQueue, Arn]
  
  triggerHandleSQSMessage:
    handler: handler.triggerHandleSQSMessage
    events:
      - http:
          path: /trigger-sqs
          method: post
          cors: true

  handleDbChanges:
    handler: handler.handleDbChanges
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - EventsDynamoDBTable
              - StreamArn

resources:
  Resources:
    EventsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TICKETS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES


    UploadsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.UPLOAD_BUCKET}

    MyQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: MyQueue
